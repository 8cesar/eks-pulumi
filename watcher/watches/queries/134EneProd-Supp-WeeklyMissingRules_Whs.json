{
  "trigger": {
    "schedule": {
      "weekly": {
        "on": "friday",
        "at": "9:00"
      }
    }
  },
  "input": {
    "search": {
      "request": {
        "indices": [
          "ene-prod-logs*"
        ],
        "body": {
          "size": 2500,
          "query": {
            "bool": {
              "must": [],
              "filter": [
                {
                  "range": {
                    "@timestamp": {
                      "gte": "now-9h",
                      "lte": "now"
                    }
                  }
                },
                {
                  "match_phrase": {
                    "indexname": "CdrServiceV2"
                  }
                },
                {
                  "match_phrase": {
                    "function": "servicebus--billing-cdr-calculated-v2/Subscriptions/cdr-service-v2-cost-calculated"
                  }
                },
                {
                  "match_phrase": {
                    "message": "cannot apply: missing wholesale cost"
                  }
                },
                {
                  "match_phrase": {
                    "level": "Warning"
                  }
                },
                {
                  "match_phrase": {
                    "output": "MissingRule | "
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "condition": {
    "compare": {
      "ctx.payload.hits.total": {
        "gt": 0
      }
    }
  },
  "actions": {
    "Webhook_Acc01": {
      "transform": {
        "script": {
          "inline": "def l = new ArrayList(); def dict = [:]; for (int i = 0; i < ctx.payload.hits.hits.length;i++){     String nojunk = /[\"\\r\\n]/.matcher(ctx.payload.hits.hits[i]._source.input).replaceAll('`');     def m = /cpo-n: '(.*?)', cpo-c: '(.*?)', cpso: '(.*?)', emsp-n: '(.*?)', emsp-c: '(.*?)', emsp: '(.*?)', tc: '(.*?)', rtc: '(.*?)', rp: '(.*?)'/.matcher(nojunk);     if (m.find()) {         String key = 'CPO Network: ' + m.group(1)                       + ' | CPO Contract: ' + m.group(2)                      + ' | CPO: ' + m.group(3)                      + ' | EMSP Network: ' + m.group(4)                       + ' | EMSP Contract: ' + m.group(5)                       + ' | EMSP: ' + m.group(6)                       + ' | Tariff: ' + m.group(7);                               def cur = dict.get(key);         if (cur == null) {             dict.put(key, 1);         } else {             dict.put(key, cur + 1);         }     } }  for (String k: dict.keySet()) {     l.add(k); }  for (int i = l.length; i < 20; i++) {     l.add('{}'); }  return l;"
        }
      },
      "webhook": {
        "scheme": "https",
        "method": "POST",
        "host": "greenfluxbv.webhook.office.com",
        "port": 443,
        "path": "/webhookb2/8da880ce-d3f3-4405-99cd-24ee23bd4d61@3145cea7-e759-4aeb-b8fc-506e0a02fd91/IncomingWebhook/e7349060e6e94b7f8aa8c21ab12135af/503b84e6-3cc1-4128-b695-e68efee7aa15",
        "headers": {
          "Content-type": "application/json"
        },
        "body": {
          "source": {
            "text": "ENECO: Missing wholesale rules\n\n1\n\n{{#toJson}}ctx.payload._value.0{{/toJson}}\n\n2\n\n{{#toJson}}ctx.payload._value.1{{/toJson}}\n\n3\n\n\n{{#toJson}}ctx.payload._value.2{{/toJson}}\n\n4\n\n{{#toJson}}ctx.payload._value.3{{/toJson}}\n\n5\n\n{{#toJson}}ctx.payload._value.4{{/toJson}}\n\n6\n\n{{#toJson}}ctx.payload._value.5{{/toJson}}\n\n7\n\n{{#toJson}}ctx.payload._value.6{{/toJson}}\n\n8\n\n{{#toJson}}ctx.payload._value.7{{/toJson}}\n\n9\n\n{{#toJson}}ctx.payload._value.8{{/toJson}}\n\n10\n\n{{#toJson}}ctx.payload._value.9{{/toJson}}\n\n11\n\n{{#toJson}}ctx.payload._value.10{{/toJson}}\n\n12\n\n{{#toJson}}ctx.payload._value.11{{/toJson}}\n\n13\n\n{{#toJson}}ctx.payload._value.12{{/toJson}}\n\n14\n\n{{#toJson}}ctx.payload._value.13{{/toJson}}\n\n15\n\n{{#toJson}}ctx.payload._value.14{{/toJson}}\n\n16\n\n{{#toJson}}ctx.payload._value.15{{/toJson}}\n\n17\n\n{{#toJson}}ctx.payload._value.16{{/toJson}}\n\n18\n\n{{#toJson}}ctx.payload._value.17{{/toJson}}\n\n19\n\n{{#toJson}}ctx.payload._value.18{{/toJson}}\n\n20\n\n{{#toJson}}ctx.payload._value.19{{/toJson}}"
          }
        }
      }
    },
    "email_1": {
      "email": {
        "profile": "standard",
        "to": [
          "sam.pendered@greenflux.com"
        ],
        "subject": "Watch [{{ctx.metadata.name}}] has exceeded the threshold",
        "body": {
          "text": "bla bla bla"
        }
      }
    }
  }
}